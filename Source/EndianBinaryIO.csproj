<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net7.0;net8.0</TargetFrameworks>
		<LangVersion>latest</LangVersion>
		<OutputType>Library</OutputType>
		<RootNamespace>Kermalis.EndianBinaryIO</RootNamespace>
		<Nullable>enable</Nullable>
		<NoWarn>IDE0270,IDE0290</NoWarn>

		<Authors>Kermalis</Authors>
		<Copyright>Kermalis</Copyright>
		<Product>EndianBinaryIO</Product>
		<Title>EndianBinaryIO</Title>
		<PackageId>EndianBinaryIO</PackageId>
		<AssemblyName>EndianBinaryIO</AssemblyName>
		<Version>2.1.1</Version>
		<RepositoryUrl>https://github.com/Kermalis/EndianBinaryIO</RepositoryUrl>
		<RepositoryType>git</RepositoryType>
		<Description>This .NET library provides a simple API to read/write bytes from/to streams and spans using user-specified endianness.
By default, supported types include primitives, enums, arrays, strings, and some common .NET struct types.
Objects can also be read/written from/to streams via reflection and attributes.
The developer can use the API even if their target behavior or data is not directly supported by using the IBinarySerializable interface, inheritting from the reader/writer, or using the manual Span methods without streams.
Performance is the focus when not using reflection; no allocations unless absolutely necessary!

Project URL and Samples ― https://github.com/Kermalis/EndianBinaryIO</Description>
		<PackageProjectUrl>https://github.com/Kermalis/EndianBinaryIO</PackageProjectUrl>
		<NeutralLanguage>en-001</NeutralLanguage>
		<PackageTags>Serialization;Reflection;Endianness;LittleEndian;BigEndian;EndianBinaryIO</PackageTags>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<PackageLicenseFile>LICENSE.md</PackageLicenseFile>
		<PackageReleaseNotes># Version 2.1.1 Changelog:
* .NET 7.0 and .NET 8.0 support.
* Small optimization when reading empty strings.

No breaking changes from v2.1.0</PackageReleaseNotes>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<GenerateSerializationAssemblies>Auto</GenerateSerializationAssemblies>
		<DebugType>none</DebugType>
		<DebugSymbols>false</DebugSymbols>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<Optimize>false</Optimize>
		<DefineConstants>DEBUG;TRACE</DefineConstants>
		<DebugType>full</DebugType>
		<DebugSymbols>true</DebugSymbols>
	</PropertyGroup>

	<ItemGroup>
		<None Include="..\LICENSE.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
		<None Include="..\README.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
	</ItemGroup>

</Project>